version: '3.8'

services:

#  varnish:
#    container_name: ${NAMESPACE}_varnish
#    image: varnish:${VARNISH_VERSION}
#    environment:
#      - TZ=${TZ}
#      - VARNISH_SIZE=1G
#    tmpfs:
#      - /var/lib/varnish:exec
#    command: "-p default_keep=300"
#    depends_on:
#      - nginx
#    ports:
#      - "80:80"
#    volumes:
#      - .docker/varnish/config/default.vcl:/etc/varnish/default.vcl

  nginx:
    container_name: ${NAMESPACE}_nginx
    image: nginx:${NGINX_VERSION}
    depends_on:
      - php
    ports:
      - "80:80"
    environment:
      SHOPURI: ${SHOPURI}
      TZ: ${TZ}
    command: '/usr/sbin/nginx -g "daemon off; error_log /dev/stderr info;"'
    networks:
      default:
        aliases:
          - ${SHOPURI}
    volumes:
      - app_data:${WORKDIR_SERVER}:delegated
      - .docker/nginx/config/nginx.conf:/etc/nginx/nginx.conf:ro
      - .docker/nginx/config/default.conf:/etc/nginx/conf.d/default.conf:ro

  php:
    #    build:
    #      context: ./.docker/php
    #      args:
    #        PHP_VERSION_SET: ${PHP_VERSION_SET}
    container_name: ${NAMESPACE}_php
    image: osioaliu/php:${PHP_VERSION_SET}
    sysctls:
      net.core.somaxconn: 65536
    depends_on:
      db:
        condition: service_healthy
      redis_session:
        condition: service_healthy
      redis_cache:
        condition: service_healthy
    environment:
      TZ: ${TZ}
      COMPOSER_CACHE_DIR: /home/www-data/.composer
      PHP_IDE_CONFIG: "serverName=localhost"
    user: ${UID_GID}
    restart: on-failure
    entrypoint: [ "fixuid","docker-php-entrypoint" ]
    command: [ "php-fpm" ]
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - db_socket:/var/run/mysqld
      - app_data:${WORKDIR_SERVER}:delegated
      - composer_cache:/home/www-data/.composer:delegated
      - ${HOME}/.ssh:/home/www-data/.ssh:delegated
      - .docker/php/config/xdebug.ini:/usr/local/etc/php/conf.d/xdebug.ini:ro
      - .docker/php/config/php-ini-overrides.ini:/usr/local/etc/php/conf.d/php-ini-overrides.ini:ro
      - .docker/php/config/zz-docker.conf:/usr/local/etc/php-fpm.d/zz-docker.conf:ro

  db:
    container_name: ${NAMESPACE}_db
    image: mariadb:${MARIADB_VERSION}
    environment:
      TZ: ${TZ}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    ports:
      - ${MYSQL_PORT}:3306
    healthcheck:
      test: 'mysqladmin ping -h localhost -p${MYSQL_ROOT_PASSWORD}'
      interval: 30s
      timeout: 30s
      retries: 3
    volumes:
      - db_socket:/var/run/mysqld
      - db_data:/var/lib/mysql/
      - .docker/mysql/db_dumps:/docker-entrypoint-initdb.d
      - .docker/mysql/config/my.cnf:/etc/mysql/my.cnf

  redis_session:
    container_name: ${NAMESPACE}_redis_session
    image: redis:${REDIS_VERSION}
    sysctls:
      net.core.somaxconn: '1024'
    entrypoint: redis-server
    command: [ "/etc/redis/redis.conf", "--appendonly", "yes" ]
    environment:
      TZ: ${TZ}
    healthcheck:
      test: 'redis-cli ping || exit 1'
      interval: 30s
      timeout: 30s
      retries: 3
    volumes:
      - redis_socket_session:/run/redis/
      - ./.docker/redis/redis.conf:/etc/redis/redis.conf:ro

  redis_cache:
    container_name: ${NAMESPACE}_redis_cache
    image: redis:${REDIS_VERSION}
    sysctls:
      net.core.somaxconn: '1024'
    entrypoint: redis-server
    command: [ "/etc/redis/redis.conf", "--appendonly", "yes" ]
    environment:
      TZ: ${TZ}
    healthcheck:
      test: 'redis-cli ping || exit 1'
      interval: 30s
      timeout: 30s
      retries: 3
    volumes:
      - redis_socket_cache:/run/redis/
      - ./.docker/redis/redis.conf:/etc/redis/redis.conf:ro

  opensearch:
    container_name: ${NAMESPACE}_opensearch
    image: markoshust/magento-opensearch:${OPENSEARCH_VERSION}
    ports:
      - "9200:9200"
      - "9300:9300"
    env_file: .docker/opensearch/.env
    environment:
      - "TZ: ${TZ}"
      - "discovery.type=single-node"
      - "cluster.routing.allocation.disk.threshold_enabled=false"
      - "index.blocks.read_only_allow_delete"

#  mailhog:
#    container_name: ${NAMESPACE}_mailhog
#    image: mailhog/mailhog:${MAILHOG_VERSION}
#    environment:
#      TZ: ${TZ}
#    ports:
#      - ${MAILHOG_EXTERNAL_PORT}:8025

#  elasticsearch:
#    build:
#      context: ./.docker/elasticsearch
#      args:
#        ELASTICSEARCH_VERSION: ${ELASTICSEARCH_VERSION}
#    container_name: ${NAMESPACE}_elasticsearch
#    image: osioaliu/elasticsearch:${ELASTICSEARCH_VERSION}
#    environment:
#      - TZ=${TZ}
#      - include_type_name=true
#      - bootstrap.memory_lock=true
#      - xpack.security.enabled=false
#      - ES_JAVA_OPTS=-Xms1024m -Xmx1024m
#      - http.host=0.0.0.0
#      - transport.host=127.0.0.1
#      - discovery.type:single-node
#    ulimits:
#      memlock:
#        soft: -1
#        hard: -1
#    depends_on:
#      db:
#        condition: service_healthy

#    entrypoint: 'docker-entrypoint.sh'
#  rabbitmq:
#    container_name: ${NAMESPACE}_rabbitmq
#    image: rabbitmq:${RABBITMQ_VERSION}
#    environment:
#      RABBITMQ_DEFAULT_USER: admin
#      RABBITMQ_DEFAULT_PASS: admin2017
#    ports:
#      - "15672:15672"
#      - "5672:5672"
#    volumes:

#      - rabbitmq_data:/var/lib/rabbitmq

#  watchtower:
#    container_name: ${NAMESPACE}_watchtower
#    image: containrrr/watchtower
#    volumes:
#      - /var/run/docker.sock:/var/run/docker.sock
#    environment:
#      TZ: ${TZ}
#    command: --interval 3600

volumes:
  opensearch_data:
  redis_socket_cache:
  redis_socket_session:
  db_socket:
  db_data:
  app_data:
    driver_opts:
      type: none
      o: bind
      device: ${WORKDIR}
  composer_cache:
    driver_opts:
      type: none
      o: bind
      device: ${HOME}/.composer

networks:
  default:
    ipam:
      config:
        - subnet: 172.19.0.0/16